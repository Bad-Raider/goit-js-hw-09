{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,OAAQC,SAASC,cAAc,QAC/BC,aAAcF,SAASG,kBAAkB,SAAS,GAClDC,YAAaJ,SAASG,kBAAkB,QAAQ,GAChDE,cAAeL,SAASG,kBAAkB,UAAU,GACpDG,YAAaN,SAASC,cAAc,WAoCtC,SAASM,EAAcC,EAAUC,GAE5B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3BC,aAAY,WACSC,KAAKC,SAAW,GAGpCJ,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEhBA,E,IA5CVX,EAAKC,OAAOiB,iBAAiB,UAE7B,SAA0BC,GAExBA,EAAEC,iBAUF,IARA,IAAMC,EAAW,CACfV,MAAOW,OAAOtB,EAAKI,aAAamB,OAChCC,KAAMF,OAAOtB,EAAKM,YAAYiB,OAC9BE,OAAQH,OAAOtB,EAAKO,cAAcgB,QAG9BG,EAAUL,EAASV,MAEhBgB,EAAI,EAAGA,EAAIN,EAASI,OAAQE,IAEnCD,GAAWL,EAASG,KACnBI,QAAQC,IAAIH,GACbjB,EAAekB,EAAI,EAAKD,EAAUL,EAASG,MACxCM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBb,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE9DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBb,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGhEX,EAAKC,OAAOoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// Notify library\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// DOM elements\nconst refs = {\n  formEl: document.querySelector(\"form\"),\n  inputDelayEl: document.getElementsByName(\"delay\")[0],\n  inputStepEl: document.getElementsByName(\"step\")[0],\n  inputAmountEl: document.getElementsByName(\"amount\")[0],\n  btnSubmitEL: document.querySelector(\"button\"),\n}\n\n// processing submit form\nrefs.formEl.addEventListener(\"submit\", handleFormSubmit);\n// handler form\nfunction handleFormSubmit(e) {\n\n  e.preventDefault();\n\n  const objVAlue = {\n    delay: Number(refs.inputDelayEl.value),\n    step: Number(refs.inputStepEl.value),\n    amount: Number(refs.inputAmountEl.value),\n  };\n\n    let counter = objVAlue.delay; \n\n  for (let i = 0; i < objVAlue.amount; i++){\n  \n    counter += objVAlue.step;\n     console.log(counter)\n    createPromise((i + 1), (counter - objVAlue.step))\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  };\n  refs.formEl.reset();\n};\n\n\n\n//function  \nfunction createPromise(position, delay) {\n  \n     return new Promise((resolve, reject) => {\n      \n       setInterval(() => {\n        let shouldResolve = Math.random() > 0.3;\n      \n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      };\n       }, delay);\n    });\n};\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputDelayEl","getElementsByName","inputStepEl","inputAmountEl","btnSubmitEL","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setInterval","Math","random","addEventListener","e","preventDefault","objVAlue","Number","value","step","amount","counter","i","console","log","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.371e5e90.js.map"}